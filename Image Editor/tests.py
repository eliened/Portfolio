from image_editor import *

assert separate_channels([[[1, 2]]]) == [[[1]], [[2]]]
assert separate_channels([[[1, 2, 3]] * 3] * 4) == [
        [[1] * 3] * 4,
        [[2] * 3] * 4,
        [[3] * 3] * 4,
    ]
assert separate_channels([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]],
) ==[[[1, 4], [7, 10]],
             [[2, 5], [8, 11]],
             [[3, 6], [9, 12]]]

assert separate_channels([
                    [[170, 20, 35], [45, 154, 161], [175, 28, 9]],
                    [[251, 210, 134], [74, 105, 46], [79, 183, 139]]
                ]) == [[[170, 45, 175], [251, 74, 79]],
             [[20, 154, 28], [210, 105, 183]],
             [[35, 161, 9], [134, 46, 139]]]


print('passed test seperate')

assert combine_channels([[[1]], [[2]]]) == [[[1, 2]]]
assert (
        combine_channels([[[1] * 3] * 4, [[2] * 3] * 4, [[3] * 3] * 4])
        == [[[1, 2, 3]] * 3] * 4)

assert combine_channels((
                [[[1, 4], [7, 10]],
                 [[2, 5], [8, 11]],
                 [[3, 6], [9, 12]]])) == [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]

assert combine_channels([[[170, 45, 175], [251, 74, 79]],
                 [[20, 154, 28], [210, 105, 183]],
                    [[35, 161, 9], [134, 46, 139]]]) == [
                [[170, 20, 35], [45, 154, 161], [175, 28, 9]],
                [[251, 210, 134], [74, 105, 46], [79, 183, 139]]
            ]




print('passd test combine channels')
assert RGB2grayscale(
                [[[170, 20, 35], [45, 154, 161], [175, 28, 9]],
                 [[251, 210, 134], [74, 105, 46], [79, 183, 139]]]) == [[67, 122, 70], [214, 89, 147]]

assert RGB2grayscale([[[100, 180, 240]]]) == [[163]]
assert RGB2grayscale([[[200, 0, 14], [15, 6, 50]]]) == [[61, 14]]
print('passed test rgb')
assert blur_kernel(7) ==      [[1 / 49 for _ in range(7)] for _ in range(7)]
print('passed test blurr')

#assert apply_kernel([[0, 128, 255]], blur_kernel(3)) == [[14, 128, 241]]
assert apply_kernel(
    [
        [10, 20, 30, 40, 50],
        [8, 16, 24, 32, 40],
        [6, 12, 18, 24, 30],
        [4, 8, 12, 16, 20],
    ],
    blur_kernel(5),
) == [
           [12, 20, 26, 34, 44],
           [11, 17, 22, 27, 34],
           [10, 16, 20, 24, 29],
           [7, 11, 16, 18, 21],
       ]
assert apply_kernel([[67, 122, 70], [214, 89, 147]], [[0.04, 0.04, 0.04, 0.04, 0.04],
                       [0.04, 0.04, 0.04, 0.04, 0.04],
                       [0.04, 0.04, 0.04, 0.04, 0.04],
                       [0.04, 0.04, 0.04, 0.04, 0.04],
                       [0.04, 0.04, 0.04, 0.04, 0.04]]) == [[79, 121, 82], [191, 96, 140]]
assert apply_kernel([[67, 122, 70], [214, 89, 147]], [[0.01, 0.02, 0.03], [0.04, 0.05, 0.06], [0.07, 0.08, 0.09]]) == [[47, 56, 41], [83, 48, 62]]
assert apply_kernel([[1, 1, 1]], [[1] * 3] * 3) == [[9, 9, 9]]
assert apply_kernel([[1, 1, 1]], [[0] * 3] * 3) == [[0, 0, 0]]
assert apply_kernel([[1, 2, 3]], [[0] * 3, [0, 1, 0], [0] * 3]) == [[1, 2, 3]]
assert apply_kernel([[1, 2, 3]], [[0] * 3, [0, 0, 1], [0] * 3]) == [[2, 3, 3]]
assert apply_kernel([[0, 128, 255]], blur_kernel(3)) == [[14, 128, 241]]

print('passed test apply')

matrix = [[1, 2, 3], [4, 5, 6]]
assert rotate_90(matrix, 'R') == [[4, 1], [5, 2], [6, 3]]
assert rotate_90(matrix, 'L') == [[3, 6], [2, 5], [1, 4]]
matrix = [[[170, 20, 35], [45, 154, 161], [175, 28, 9]],
                  [[251, 210, 134], [74, 105, 46], [79, 183, 139]]]
assert rotate_90(matrix, 'R') == [[[251, 210, 134], [170, 20, 35]],
             [[74, 105, 46], [45, 154, 161]],
             [[79, 183, 139], [175, 28, 9]]]
assert rotate_90(matrix, 'L') == [[[175, 28, 9], [79, 183, 139]],
             [[45, 154, 161], [74, 105, 46]],
             [[170, 20, 35], [251, 210, 134]]]
assert rotate_90([[1, 2, 3], [4, 5, 6]], 'R') == [[4, 1], [5, 2], [6, 3]]
assert rotate_90([[1, 2, 3], [4, 5, 6]], 'L') == [[3, 6], [2, 5], [1, 4]]
assert rotate_90([[[1, 2, 3], [4, 5, 6]], [[0, 5, 9], [255, 200, 7]]], 'L') == [
        [[4, 5, 6], [255, 200, 7]], [[1, 2, 3], [0, 5, 9]]]
print('passed test rotate')


image = [[0, 64], [128, 255]]
assert bilinear_interpolation(image, 1, 1) == 255
assert bilinear_interpolation(image, 0.5, 0.5) == 112
assert bilinear_interpolation(image, 0.5, 1) == 160
image = [[67, 122, 70],
         [214, 89, 147]]
assert bilinear_interpolation(image, 1, 0.8) == 114
assert bilinear_interpolation(
                [[1, 2, 3],
                 [4, 5, 6],
                 [7, 8, 9]], 0.5, 1.25) == 4
assert bilinear_interpolation([[0, 64], [128, 255]], 0, 0) == 0
assert bilinear_interpolation([[0, 64], [128, 255]], 1, 1) == 255
assert bilinear_interpolation([[0, 64], [128, 255]], 0.5, 0.5) == 112
assert bilinear_interpolation([[0, 64], [128, 255]], 0.5, 1) == 160

print('passed test billinear')

assert get_edges([[200, 50, 200]], 3, 3, 10) == [[255, 0, 255]]
assert get_edges([[67, 122, 70], [214, 89, 147]], 3, 5, 5) == [[0, 255, 0], [255, 255, 255]]

print('passed getrdgrs')

assert resize([[0,   50],
               [100, 200]], 3, 4)  == [[0, 17, 33, 50], 
                                       [50, 75, 100, 125], 
                                       [100, 133, 167, 200]]
assert resize([[0, 10], [10, 0]], 2, 2) == [[0, 10], [10, 0]]
assert resize([[0, 10], [10, 0]], 3, 3) == [
    [0, 5, 10], [5, 5, 5], [10, 5, 0]]
assert resize([[0, 5, 10], [5, 5, 5], [10, 5, 0]],
              2, 2) == [[0, 10], [10, 0]]
mat = [[2, 4, 6],
       [3, 8, 12],
       [16, 5, 11]]
assert resize(mat, 2, 2) == [[2, 6], [16, 11]]
assert resize(mat, 6, 6) == [[2, 3, 4, 4, 5, 6], [2, 4, 5, 6, 7, 8], [
    3, 5, 6, 8, 9, 11], [6, 6, 7, 8, 10, 12], [11, 9, 7, 7, 9, 11],
                             [16, 12, 7, 6, 9, 11]]
assert resize(mat, 3, 6) == [[2, 3, 4, 4, 5, 6], [
    3, 5, 7, 9, 10, 12], [16, 12, 7, 6, 9, 11]]
assert resize(mat, 6, 3) == [[2, 4, 6], [2, 6, 8], [
    3, 7, 11], [6, 7, 12], [11, 6, 11], [16, 5, 11]]
assert resize(mat, 4, 4) == [[2, 3, 5, 6], [
    3, 5, 8, 10], [7, 7, 9, 12], [16, 9, 7, 11]]

print('passed resize')
#####

matrix = [[1, 2, 3], [4, 5, 6]]
assert rotate_90(matrix, 'R') == [[4, 1], [5, 2], [6, 3]]
#assert rotate_90(matrix, 'L') == [[3, 6], [2, 5], [1, 4]]
matrix = [[[170, 20, 35], [45, 154, 161], [175, 28, 9]],
                  [[251, 210, 134], [74, 105, 46], [79, 183, 139]]]
assert rotate_90(matrix, 'R') == [[[251, 210, 134], [170, 20, 35]],
             [[74, 105, 46], [45, 154, 161]],
             [[79, 183, 139], [175, 28, 9]]]
'''assert rotate_90(matrix, 'L') == [[[175, 28, 9], [79, 183, 139]],
             [[45, 154, 161], [74, 105, 46]],
             [[170, 20, 35], [251, 210, 134]]]'''
assert rotate_90([[1, 2, 3], [4, 5, 6]], 'R') == [[4, 1], [5, 2], [6, 3]]
#assert rotate_90([[1, 2, 3], [4, 5, 6]], 'L') == [[3, 6], [2, 5], [1, 4]]
'''assert rotate_90([[[1, 2, 3], [4, 5, 6]], [[0, 5, 9], [255, 200, 7]]], 'L') == [
        [[4, 5, 6], [255, 200, 7]], [[1, 2, 3], [0, 5, 9]]]'''
print('passed test rotate')
assert get_edges([[200, 50, 200]], 3, 3, 10) == [[255, 0, 255]]
assert get_edges([[67, 122, 70], [214, 89, 147]], 3, 5, 5) == [[0, 255, 0], [255, 255, 255]]

print('passed getrdgrs')


print('passed')